HIF003
--
-- Copyright (C) 1988-2000 Altera Corporation
-- Any megafunction design, and related net list (encrypted or decrypted),
-- support information, device programming or simulation file, and any other
-- associated documentation or information provided by Altera or a partner
-- under Altera's Megafunction Partnership Program may be used only to
-- program PLD devices (but not masked PLD devices) from Altera.  Any other
-- use of such megafunction design, net list, support information, device
-- programming or simulation file, or any other related documentation or
-- information is prohibited for any other purpose, including, but not
-- limited to modification, reverse engineering, de-compiling, or use with
-- any other silicon devices, unless such use is explicitly licensed under
-- a separate agreement with Altera or a megafunction partner.  Title to
-- the intellectual property, including patents, copyrights, trademarks,
-- trade secrets, or maskworks, embodied in any such megafunction design,
-- net list, support information, device programming or simulation file, or
-- any other related documentation or information provided by Altera or a
-- megafunction partner, remains with Altera, the megafunction partner, or
-- their respective licensors.  No other licenses, including any licenses
-- needed under any third party's intellectual property, are provided herein.
--
-- Warning: do not edit this file!
--
FILES
{
	rzu.gdf
	{
		rzu [] []
		{
			15 [] [];
		}
	}
	16dmux.gdf
	{
		16dmux [] []
		{
			16 [] [];
		}
	}
	register2.gdf
	{
		register2 [] []
		{
			17 [] [];
		}
	}
	lpm_add_sub.tdf
	{
		lpm_add_sub [USE_LPM_FOR_AHDL_OPERATORS,LPM_WIDTH,LPM_REPRESENTATION=SIGNED,LPM_DIRECTION=DEFAULT,ONE_INPUT_IS_CONSTANT=NO,LPM_PIPELINE=0,MAXIMIZE_SPEED=5,OPTIMIZE_FOR_SPEED=5,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=32,DEVICE_FAMILY,STYLE] [aglobal.inc,altshift.inc,bypassff.inc,look_add.inc,addcore.inc,lpm_add_sub.inc]
		{
			2 [USE_LPM_FOR_AHDL_OPERATORS=OFF,LPM_WIDTH=6,LPM_REPRESENTATION=SIGNED,LPM_DIRECTION=DEFAULT,ONE_INPUT_IS_CONSTANT=NO,LPM_PIPELINE=0,MAXIMIZE_SPEED=5,OPTIMIZE_FOR_SPEED=5,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=0,DEVICE_FAMILY=MAX7000,STYLE=NORMAL] [DATAA0,DATAA1,DATAA2,DATAA3,DATAA4,DATAA5,DATAB0,DATAB1,DATAB2,DATAB3,DATAB4,DATAB5,CIN,RESULT0,RESULT1,RESULT2,RESULT3,RESULT4,RESULT5];
			7 [USE_LPM_FOR_AHDL_OPERATORS=OFF,LPM_WIDTH=5,LPM_REPRESENTATION=SIGNED,LPM_DIRECTION=DEFAULT,ONE_INPUT_IS_CONSTANT=NO,LPM_PIPELINE=0,MAXIMIZE_SPEED=5,OPTIMIZE_FOR_SPEED=5,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=0,DEVICE_FAMILY=MAX7000,STYLE=NORMAL] [DATAA0,DATAA1,DATAA2,DATAA3,DATAA4,DATAB0,DATAB1,DATAB2,DATAB3,DATAB4,CIN,RESULT0,RESULT1,RESULT2,RESULT3,RESULT4];
			11 [USE_LPM_FOR_AHDL_OPERATORS=OFF,LPM_WIDTH=7,LPM_REPRESENTATION=SIGNED,LPM_DIRECTION=DEFAULT,ONE_INPUT_IS_CONSTANT=YES,LPM_PIPELINE=0,MAXIMIZE_SPEED=5,OPTIMIZE_FOR_SPEED=5,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=0,DEVICE_FAMILY=MAX7000,STYLE=NORMAL] [DATAA0,DATAA1,DATAA2,DATAA3,DATAA4,DATAA5,DATAA6,DATAB0,DATAB1,DATAB2,DATAB3,DATAB4,DATAB5,DATAB6,CIN,RESULT0,RESULT1,RESULT2,RESULT3,RESULT4,RESULT5,RESULT6];
		}
	}
	addcore.tdf
	{
		addcore [USE_LPM_FOR_AHDL_OPERATORS,width,CONSTANT_CIN,CARRY_CHAIN,CARRY_CHAIN_LENGTH,DEVICE_FAMILY] [aglobal.inc,addcore.inc]
		{
			3 [USE_LPM_FOR_AHDL_OPERATORS=OFF,width=6,CONSTANT_CIN=0,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=0,DEVICE_FAMILY=MAX7000] [cin,datab0,datab1,datab2,datab3,datab4,datab5,dataa0,dataa1,dataa2,dataa3,dataa4,dataa5,result0,result1,result2,result3,result4,result5];
			4 [USE_LPM_FOR_AHDL_OPERATORS=OFF,width=8,CONSTANT_CIN=0,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=0,DEVICE_FAMILY=MAX7000] [cin,datab0,datab1,datab2,datab3,datab4,datab5,dataa0,dataa1,dataa2,dataa3,dataa4,dataa5,result0,result1,result2,result3,result4,result5,result6];
			8 [USE_LPM_FOR_AHDL_OPERATORS=OFF,width=5,CONSTANT_CIN=0,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=0,DEVICE_FAMILY=MAX7000] [cin,datab0,datab1,datab2,datab3,datab4,dataa0,dataa1,dataa2,dataa3,dataa4,result0,result1,result2,result3,result4];
			9 [USE_LPM_FOR_AHDL_OPERATORS=OFF,width=8,CONSTANT_CIN=0,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=0,DEVICE_FAMILY=MAX7000] [cin,datab0,datab1,datab2,datab3,datab4,dataa0,dataa1,dataa2,dataa3,dataa4,result0,result1,result2,result3,result4,result5];
			12 [USE_LPM_FOR_AHDL_OPERATORS=OFF,width=7,CONSTANT_CIN=0,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=0,DEVICE_FAMILY=MAX7000] [cin,datab0,datab1,datab2,datab3,datab4,datab5,datab6,dataa0,dataa1,dataa2,dataa3,dataa4,dataa5,dataa6,result0,result1,result2,result3,result4,result5,result6];
			13 [USE_LPM_FOR_AHDL_OPERATORS=OFF,width=8,CONSTANT_CIN=0,CARRY_CHAIN=IGNORE,CARRY_CHAIN_LENGTH=0,DEVICE_FAMILY=MAX7000] [cin,datab0,datab1,datab2,datab3,datab4,datab5,datab6,dataa0,dataa1,dataa2,dataa3,dataa4,dataa5,dataa6,result0,result1,result2,result3,result4,result5,result6,result7];
		}
	}
	altshift.tdf
	{
		altshift [USE_LPM_FOR_AHDL_OPERATORS,WIDTH=4,DEPTH=0] []
		{
			5 [USE_LPM_FOR_AHDL_OPERATORS=OFF,WIDTH=6,DEPTH=0] [data0,data1,data2,data3,data4,data5,result0,result1,result2,result3,result4,result5];
			6 [USE_LPM_FOR_AHDL_OPERATORS=OFF,WIDTH=1,DEPTH=0] [data0,result0];
			10 [USE_LPM_FOR_AHDL_OPERATORS=OFF,WIDTH=5,DEPTH=0] [data0,data1,data2,data3,data4,result0,result1,result2,result3,result4];
			14 [USE_LPM_FOR_AHDL_OPERATORS=OFF,WIDTH=7,DEPTH=0] [data0,data1,data2,data3,data4,data5,data6,result0,result1,result2,result3,result4,result5,result6];
		}
	}
	proc.gdf
	{
		proc [] []
		{
			0 [] [];
		}
	}
}
TREE
{
	proc::(0,0):(0): proc.gdf
	{
		alu0::(0,0):(1): alu0.vhd
		{
			lpm_add_sub:2:(26,1):(341): lpm_add_sub.tdf
			{
				addcore:3:(212,4):(52,adder): addcore.tdf
				{
					addcore:4:(178,10):(49,adder0): addcore.tdf;
				}
				altshift:5:(222,2):(77,result_ext_latency_ffs): altshift.tdf;
				altshift:6:(224,2):(95,carry_ext_latency_ffs): altshift.tdf;
				altshift:6:(226,2):(103,oflow_ext_latency_ffs): altshift.tdf;
			}
			lpm_add_sub:7:(26,1):(343): lpm_add_sub.tdf
			{
				addcore:8:(212,4):(49,adder): addcore.tdf
				{
					addcore:9:(178,10):(46,adder0): addcore.tdf;
				}
				altshift:10:(222,2):(71,result_ext_latency_ffs): altshift.tdf;
				altshift:6:(224,2):(87,carry_ext_latency_ffs): altshift.tdf;
				altshift:6:(226,2):(95,oflow_ext_latency_ffs): altshift.tdf;
			}
			lpm_add_sub:2:(27,1):(393): lpm_add_sub.tdf
			{
				addcore:3:(212,4):(52,adder): addcore.tdf
				{
					addcore:4:(178,10):(49,adder0): addcore.tdf;
				}
				altshift:5:(222,2):(77,result_ext_latency_ffs): altshift.tdf;
				altshift:6:(224,2):(95,carry_ext_latency_ffs): altshift.tdf;
				altshift:6:(226,2):(103,oflow_ext_latency_ffs): altshift.tdf;
			}
			lpm_add_sub:11:(27,1):(394): lpm_add_sub.tdf
			{
				addcore:12:(212,4):(55,adder): addcore.tdf
				{
					addcore:13:(178,10):(52,adder0): addcore.tdf;
				}
				altshift:14:(222,2):(83,result_ext_latency_ffs): altshift.tdf;
				altshift:6:(224,2):(103,carry_ext_latency_ffs): altshift.tdf;
				altshift:6:(226,2):(111,oflow_ext_latency_ffs): altshift.tdf;
			}
			lpm_add_sub:7:(27,1):(396): lpm_add_sub.tdf
			{
				addcore:8:(212,4):(49,adder): addcore.tdf
				{
					addcore:9:(178,10):(46,adder0): addcore.tdf;
				}
				altshift:10:(222,2):(71,result_ext_latency_ffs): altshift.tdf;
				altshift:6:(224,2):(87,carry_ext_latency_ffs): altshift.tdf;
				altshift:6:(226,2):(95,oflow_ext_latency_ffs): altshift.tdf;
			}
			lpm_add_sub:2:(28,1):(446): lpm_add_sub.tdf
			{
				addcore:3:(212,4):(52,adder): addcore.tdf
				{
					addcore:4:(178,10):(49,adder0): addcore.tdf;
				}
				altshift:5:(222,2):(77,result_ext_latency_ffs): altshift.tdf;
				altshift:6:(224,2):(95,carry_ext_latency_ffs): altshift.tdf;
				altshift:6:(226,2):(103,oflow_ext_latency_ffs): altshift.tdf;
			}
			lpm_add_sub:11:(28,1):(447): lpm_add_sub.tdf
			{
				addcore:12:(212,4):(55,adder): addcore.tdf
				{
					addcore:13:(178,10):(52,adder0): addcore.tdf;
				}
				altshift:14:(222,2):(83,result_ext_latency_ffs): altshift.tdf;
				altshift:6:(224,2):(103,carry_ext_latency_ffs): altshift.tdf;
				altshift:6:(226,2):(111,oflow_ext_latency_ffs): altshift.tdf;
			}
			lpm_add_sub:7:(28,1):(449): lpm_add_sub.tdf
			{
				addcore:8:(212,4):(49,adder): addcore.tdf
				{
					addcore:9:(178,10):(46,adder0): addcore.tdf;
				}
				altshift:10:(222,2):(71,result_ext_latency_ffs): altshift.tdf;
				altshift:6:(224,2):(87,carry_ext_latency_ffs): altshift.tdf;
				altshift:6:(226,2):(95,oflow_ext_latency_ffs): altshift.tdf;
			}
		}
		rzu::(0,0):(2): rzu.gdf
		{
			16dmux:16:(0,0):(54): 16dmux.gdf;
			16dmux:16:(0,0):(6): 16dmux.gdf;
			register2:17:(0,0):(60): register2.gdf;
			register2:17:(0,0):(68): register2.gdf;
			register2:17:(0,0):(59): register2.gdf;
			register2:17:(0,0):(67): register2.gdf;
			register2:17:(0,0):(58): register2.gdf;
			register2:17:(0,0):(66): register2.gdf;
			register2:17:(0,0):(57): register2.gdf;
			register2:17:(0,0):(65): register2.gdf;
			register2:17:(0,0):(56): register2.gdf;
			register2:17:(0,0):(64): register2.gdf;
			register2:17:(0,0):(55): register2.gdf;
			register2:17:(0,0):(63): register2.gdf;
			register2:17:(0,0):(49): register2.gdf;
			register2:17:(0,0):(62): register2.gdf;
			register2:17:(0,0):(46): register2.gdf;
			register2:17:(0,0):(61): register2.gdf;
		}
	}
}
